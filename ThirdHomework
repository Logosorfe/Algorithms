Дано натуральное число N. Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае. 
Операцией возведения в степень пользоваться нельзя! Ввод 8 Вывод: YES Ввод 3 Вывод: NO 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class NaturalNumbers {
    int count = 0;

    public static void main(String[] args) {
        NaturalNumbers naturalNumbers = new NaturalNumbers();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter a natural number");
        int natural = scanner.nextInt();

        while (natural <= 0) {
            System.out.println("Not a natural number");
            System.out.println("Enter a natural number");
            natural = scanner.nextInt();
        }

        String result = naturalNumbers.isEven(natural, naturalNumbers);

        System.out.println("Is the natural number equals 2 raised to the power of " +
                (naturalNumbers.count + 1) + " - " + result);
        System.out.println("The number of cycles it took for recursive method is - " +
                naturalNumbers.count);
    }

    public String isEven(int number, NaturalNumbers obj) {
        if ((double) number / 2 == 1.0) {
            return "YES";
        } else if (number % 2 != 0 && (double) number / 2 != 1.0) {
            return "NO";
        } else {
            obj.count++;
            return isEven(number / 2, obj);
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Дано натуральное число N. Вычислите сумму его цифр. При решении этой задачи нельзя использовать строки, списки, массивы (ну и циклы, 
разумеется). Ввод 179 Вывод 17 Ввод 985 Вывод 22 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class SumOfDigits {
    public static void main(String[] args) {
        System.out.println(sum(666));
    }

    public static int sum(int number) {
        if (number / 10 == 0) {
            return number;
        } else {
            int currentSum = number % 10;
            return currentSum += sum(number/10);
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Напишите рекурсивный метод, который выводит на экран числа Фибоначчи до N-ого элемента.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class FibonacciNumbersPrint {
    int n;

    public FibonacciNumbersPrint(int nNumber) {
        this.n = nNumber;
    }

    public static void main(String[] args) {
        FibonacciNumbersPrint fibonacciNumbersPrint = new FibonacciNumbersPrint(3);
        System.out.println("Row of numbers for " + fibonacciNumbersPrint.n + "! is:");
        System.out.println(fibonacciNumbersPrint.printNumbers(fibonacciNumbersPrint.n));
    }

    public int printNumbers(int number) {
        if (number == 1) {
            return 1;
        } else {
            System.out.print(number + ", ");
            return printNumbers(number - 1);
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 Напишите рекурсивный метод, который проверяет, является ли строка палиндромом.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
